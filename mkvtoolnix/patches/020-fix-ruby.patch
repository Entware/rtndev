--- a/Rakefile
+++ b/Rakefile
@@ -268,7 +268,7 @@ def define_default_task
   targets << ($run_unit_tests ? 'tests:run_unit' : 'tests:unit') if $have_gtest
 
   # The tags file -- but only if it exists already
-  if File.exists?("TAGS")
+  if FileTest.exist?("TAGS")
     targets << "TAGS"   if !c(:ETAGS).empty?
     targets << "BROWSE" if !c(:EBROWSE).empty?
   end
@@ -421,7 +421,7 @@ end
 rule '.1' => '.xml' do |t|
   filter = lambda do |code, lines|
     if (0 == code) && lines.any? { |line| /^error|parser error/i.match(line) }
-      File.unlink(t.name) if File.exists?(t.name)
+      File.unlink(t.name) if FileTest.exist?(t.name)
       result = 1
       puts lines.join('')
 
@@ -439,7 +439,7 @@ rule '.1' => '.xml' do |t|
 
   stylesheet = "#{c(:DOCBOOK_ROOT)}/manpages/docbook.xsl"
 
-  if !FileTest.exists?(stylesheet)
+  if !FileTest.exist?(stylesheet)
     puts "Error: the DocBook stylesheet '#{stylesheet}' does not exist."
     exit 1
   end
@@ -992,7 +992,7 @@ task :clean do
 
   remove_files_by_patterns patterns
 
-  if Dir.exists? $dependency_dir
+  if FileTest.exist? $dependency_dir
     puts_vaction "rm -rf", :target => "#{$dependency_dir}"
     FileUtils.rm_rf $dependency_dir
   end
--- a/packaging/windows/file_list_to_nsi_uninstaller_instructions.rb
+++ b/packaging/windows/file_list_to_nsi_uninstaller_instructions.rb
@@ -7,7 +7,7 @@ fail "Missing file list name" if ARGV.em
 
 config    = read_config
 file_name = ARGV[0]
-file_name = "#{config['file_list_dir']}/#{file_name}.txt" if !FileTest.exists?(file_name)
+file_name = "#{config['file_list_dir']}/#{file_name}.txt" if !FileTest.exist?(file_name)
 files     = IO.readlines(file_name).map { |file| file.chomp.gsub(%r{^\.}, '').gsub(%r{^/}, '').gsub(%r{/}, '\\') }
 dirs      = {}
 
--- a/rake.d/config.rb
+++ b/rake.d/config.rb
@@ -13,10 +13,10 @@ end
 def read_build_config
   dir = File.dirname(__FILE__) + '/..'
 
-  fail "build-config not found: please run ./configure" unless File.exists?("#{dir}/build-config")
+  fail "build-config not found: please run ./configure" unless FileTest.exist?("#{dir}/build-config")
 
   config = read_config_file("#{dir}/build-config")
-  config = config.merge(read_config_file("#{dir}/build-config.local")) if File.exists?("#{dir}/build-config.local")
+  config = config.merge(read_config_file("#{dir}/build-config.local")) if FileTest.exist?("#{dir}/build-config.local")
 
   config
 end
--- a/rake.d/compilation_database.rb
+++ b/rake.d/compilation_database.rb
@@ -8,7 +8,7 @@ module Mtx
     end
 
     def self.read
-      return {} unless FileTest.exists?(@file_name)
+      return {} unless FileTest.exist?(@file_name)
 
       Hash[
         *JSON.parse(IO.readlines(@file_name).join("")).
@@ -19,7 +19,7 @@ module Mtx
 
     def self.write
       return if @compilation_commands.empty?
-      return if !FileTest.exists?(@file_name) && !c?(:BUILD_COMPILATION_DATABASE)
+      return if !FileTest.exist?(@file_name) && !c?(:BUILD_COMPILATION_DATABASE)
 
       entries = self.read.merge(@compilation_commands).values.sort_by { |e| e["file"] }
       File.open(@file_name, "w") do |f|
--- a/rake.d/helpers.rb
+++ b/rake.d/helpers.rb
@@ -172,7 +172,7 @@ def import_dependencies
   Dir.glob("#{$dependency_dir}/*.dep").each do |file_name|
     lines  = IO.readlines(file_name).collect(&:chomp)
     target = lines.shift
-    file target => lines.select { |dep_name| File.exists? dep_name }
+    file target => lines.select { |dep_name| FileTest.exist? dep_name }
   end
 end
 
@@ -202,7 +202,7 @@ def install_data(destination, *files)
 end
 
 def remove_files_by_patterns patterns
-  patterns.collect { |pattern| FileList[pattern].to_a }.flatten.uniq.select { |file_name| File.exists? file_name }.each do |file_name|
+  patterns.collect { |pattern| FileList[pattern].to_a }.flatten.uniq.select { |file_name| FileTest.exist? file_name }.each do |file_name|
     puts_vaction "rm", :target => file_name
     File.unlink file_name
   end
@@ -245,7 +245,7 @@ def check_version required, actual
 end
 
 def ensure_file file_name, content = ""
-  if FileTest.exists?(file_name)
+  if FileTest.exist?(file_name)
     current_content = IO.readlines(file_name).join("\n")
     return if current_content == content
   end
@@ -258,7 +258,7 @@ def update_version_number_include
   current_version = nil
   wanted_version  = c(:PACKAGE_VERSION)
 
-  if FileTest.exists?($version_header_name)
+  if FileTest.exist?($version_header_name)
     lines = IO.readlines($version_header_name)
 
     if !lines.empty? && %r{#define.*?"([0-9.]+)"}.match(lines[0])
@@ -334,7 +334,7 @@ def update_qrc
     double_size = size * 2
     double_file = "share/icons/#{double_size}x#{double_size}/#{base_name}.png"
 
-    next unless FileTest.exists?(double_file)
+    next unless FileTest.exist?(double_file)
 
     add_node.call(double_file, name_alias)
     seen[file.gsub(%r{.*/icons}, 'icons')] = true
--- a/rake.d/iana_language_subtag_registry.rb
+++ b/rake.d/iana_language_subtag_registry.rb
@@ -8,7 +8,7 @@ module Mtx::IANALanguageSubtagRegistry
     @@registry_mutex.synchronize {
       return @@registry if @@registry
 
-      if !FileTest.exists?(@@registry_file)
+      if !FileTest.exist?(@@registry_file)
         url = "https://www.iana.org/assignments/language-subtag-registry/language-subtag-registry"
         runq "wget", url, "wget --quiet -O #{@@registry_file} #{url}"
         @@registry_downloaded = true
@@ -127,6 +127,6 @@ EOT
   end
 
   END {
-    File.unlink(@@registry_file) if @@registry_downloaded && FileTest.exists?(@@registry_file)
+    File.unlink(@@registry_file) if @@registry_downloaded && FileTest.exist?(@@registry_file)
   }
 end
--- a/rake.d/iso15924.rb
+++ b/rake.d/iso15924.rb
@@ -4,7 +4,7 @@ def create_iso15924_script_list_file
   url           = "https://unicode.org/iso15924/#{zip_file}"
   cpp_file_name = "src/common/iso15924_script_list.cpp"
 
-  File.unlink(zip_file) if FileTest.exists?(zip_file)
+  File.unlink(zip_file) if FileTest.exist?(zip_file)
 
   runq "wget", url, "wget --quiet -O #{zip_file} #{url}"
   runq "unzip", zip_file, "unzip -o -q #{zip_file}"
@@ -68,6 +68,6 @@ EOT
 
 ensure
   (txt_files + [ zip_file ]).each do |file_name|
-    File.unlink(file_name) if FileTest.exists?(file_name)
+    File.unlink(file_name) if FileTest.exist?(file_name)
   end
 end
--- a/rake.d/tarball.rb
+++ b/rake.d/tarball.rb
@@ -1,6 +1,6 @@
 def create_source_tarball suffix = ""
   tarball = "#{Dir.pwd}/../mkvtoolnix-#{c(:PACKAGE_VERSION)}#{suffix}.tar.xz"
-  fail "#{tarball} does already exist" if FileTest.exists?(tarball)
+  fail "#{tarball} does already exist" if FileTest.exist?(tarball)
 
   Dir.mktmpdir do |dir|
     clone_dir = "#{dir}/mkvtoolnix-#{c(:PACKAGE_VERSION)}"
--- a/tests/test.d/simple_test.rb
+++ b/tests/test.d/simple_test.rb
@@ -85,7 +85,7 @@ class SimpleTest
   end
 
   def clean_tmp
-    File.unlink(@tmp) if @tmp && File.exists?(@tmp) && !ENV["KEEP_TMPFILES"].nil? && (ENV["KEEP_TMPFILES"] != "1")
+    File.unlink(@tmp) if @tmp && FileTest.exist?(@tmp) && !ENV["KEEP_TMPFILES"].nil? && (ENV["KEEP_TMPFILES"] != "1")
     @tmp = nil
   end
 
@@ -106,7 +106,7 @@ class SimpleTest
     re = %r{^#{self.tmp_name_prefix}}
     Dir.entries("/tmp").each do |entry|
       file = "/tmp/#{entry}"
-      File.unlink(file) if re.match(file) and File.exists?(file)
+      File.unlink(file) if re.match(file) and FileTest.exist?(file)
     end
   end
 
@@ -302,7 +302,7 @@ class SimpleTest
     command = "../src/mkvpropedit --engage no_variable_data #{file_name} #{args.first}"
     *result = self.sys command, :exit_code => options[:exit_code], :no_result => options[:no_result]
 
-    self.sys "../src/tools/ebml_validator -M #{file_name}", dont_record_command: true if FileTest.exists?("../src/tools/ebml_validator")
+    self.sys "../src/tools/ebml_validator -M #{file_name}", dont_record_command: true if FileTest.exist?("../src/tools/ebml_validator")
 
     return *result
   end
--- a/tests/test.d/test.rb
+++ b/tests/test.d/test.rb
@@ -39,7 +39,7 @@ class Test
     re = /^#{self.tmp_name_prefix}/
     Dir.entries("/tmp").each do |entry|
       file = "/tmp/#{entry}"
-      File.unlink(file) if re.match(file) and File.exists?(file)
+      File.unlink(file) if re.match(file) and FileTest.exist?(file)
     end
   end
 
@@ -95,7 +95,7 @@ class Test
     output = hash_file @tmp
 
     if erase
-      File.unlink(@tmp) if File.exists?(@tmp) && (ENV["KEEP_TMPFILES"] != "1")
+      File.unlink(@tmp) if FileTest.exist?(@tmp) && (ENV["KEEP_TMPFILES"] != "1")
       @debug_commands << "rm #{@tmp}"
       @tmp = nil
     end
@@ -122,7 +122,7 @@ class Test
     command = "../src/mkvpropedit --engage no_variable_data #{file_name} #{args.shift}"
     *result = sys command, retcode
 
-    sys "../src/tools/ebml_validator -M #{file_name}", :dont_record_command => true if FileTest.exists?("../src/tools/ebml_validator")
+    sys "../src/tools/ebml_validator -M #{file_name}", :dont_record_command => true if FileTest.exist?("../src/tools/ebml_validator")
 
     return *result
   end
--- a/tests/test-382split_chapters.rb
+++ b/tests/test-382split_chapters.rb
@@ -7,7 +7,7 @@ avi      = "data/avi/v-h264-aac.avi"
 chapters = "data/text/chapters-v-h264-aac.txt"
 
 def hash_results max
-  ( (1..max).collect { |i| hash_file(sprintf("%s-%02d", tmp, i)) } + [ File.exists?(sprintf("%s-%02d", tmp, max + 1)) ? 'bad' : 'ok' ]).join '+'
+  ( (1..max).collect { |i| hash_file(sprintf("%s-%02d", tmp, i)) } + [ FileTest.exist?(sprintf("%s-%02d", tmp, max + 1)) ? 'bad' : 'ok' ]).join '+'
 end
 
 test "chapters-in-mkv: numbers 1 & 7" do
--- a/tests/test-532chapter_generation_when_appending.rb
+++ b/tests/test-532chapter_generation_when_appending.rb
@@ -5,7 +5,7 @@ file = "data/avi/v-h264-aac.avi"
 describe "mkvmerge / generate chapter »when-appending«"
 
 def hash_results max
-  ( (1..max).collect { |i| hash_file(sprintf("%s-%02d", tmp, i)) } + [ File.exists?(sprintf("%s-%02d", tmp, max + 1)) ? 'bad' : 'ok' ]).join '+'
+  ( (1..max).collect { |i| hash_file(sprintf("%s-%02d", tmp, i)) } + [ FileTest.exist?(sprintf("%s-%02d", tmp, max + 1)) ? 'bad' : 'ok' ]).join '+'
 end
 
 test_merge "#{file} + #{file} + #{file}", :args => "--generate-chapters when-appending"
--- a/tests/test-533chapter_generation_interval.rb
+++ b/tests/test-533chapter_generation_interval.rb
@@ -5,7 +5,7 @@ file = "data/avi/v-h264-aac.avi"
 describe "mkvmerge / generate chapter »interval«"
 
 def hash_results max
-  ( (1..max).collect { |i| hash_file(sprintf("%s-%02d", tmp, i)) } + [ File.exists?(sprintf("%s-%02d", tmp, max + 1)) ? 'bad' : 'ok' ]).join '+'
+  ( (1..max).collect { |i| hash_file(sprintf("%s-%02d", tmp, i)) } + [ FileTest.exist?(sprintf("%s-%02d", tmp, max + 1)) ? 'bad' : 'ok' ]).join '+'
 end
 
 test_merge "#{file} + #{file} + #{file}", :args => "--generate-chapters interval:30s"
--- a/tests/test-534chapter_generation_when_appending_audio_only.rb
+++ b/tests/test-534chapter_generation_when_appending_audio_only.rb
@@ -5,7 +5,7 @@ file = "data/simple/v.mp3"
 describe "mkvmerge / generate chapter »when-appending« without video tracks"
 
 def hash_results max
-  ( (1..max).collect { |i| hash_file(sprintf("%s-%02d", tmp, i)) } + [ File.exists?(sprintf("%s-%02d", tmp, max + 1)) ? 'bad' : 'ok' ]).join '+'
+  ( (1..max).collect { |i| hash_file(sprintf("%s-%02d", tmp, i)) } + [ FileTest.exist?(sprintf("%s-%02d", tmp, max + 1)) ? 'bad' : 'ok' ]).join '+'
 end
 
 test_merge "#{file} + #{file} + #{file}", :args => "--generate-chapters when-appending"
--- a/tests/test-535chapter_generation_interval_audio_only.rb
+++ b/tests/test-535chapter_generation_interval_audio_only.rb
@@ -5,7 +5,7 @@ file = "data/simple/v.mp3"
 describe "mkvmerge / generate chapter »interval« without video tracks"
 
 def hash_results max
-  ( (1..max).collect { |i| hash_file(sprintf("%s-%02d", tmp, i)) } + [ File.exists?(sprintf("%s-%02d", tmp, max + 1)) ? 'bad' : 'ok' ]).join '+'
+  ( (1..max).collect { |i| hash_file(sprintf("%s-%02d", tmp, i)) } + [ FileTest.exist?(sprintf("%s-%02d", tmp, max + 1)) ? 'bad' : 'ok' ]).join '+'
 end
 
 test_merge "#{file} + #{file} + #{file}", :args => "--generate-chapters interval:30s"
--- a/tools/development/update_translations.rb
+++ b/tools/development/update_translations.rb
@@ -106,11 +106,11 @@ module AddPo
     base ||= ''
     target = "#{$po_dir}/qt/qt#{base}_#{language}.ts"
 
-    if !FileTest.exists?(target) && /^([a-z]+)_[a-z]+/i.match(language)
+    if !FileTest.exist?(target) && /^([a-z]+)_[a-z]+/i.match(language)
       target = "#{$po_dir}/qt/qt#{base}_#{$1}.ts"
     end
 
-    fail "target file does not exist yet: #{target} (wrong language?)" if !FileTest.exists?(target)
+    fail "target file does not exist yet: #{target} (wrong language?)" if !FileTest.exist?(target)
 
     File.open(target, "w") { |file| file.puts content.map(&:chomp).join("\n") }
     File.unlink file_name
