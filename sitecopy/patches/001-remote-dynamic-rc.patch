From: Jesus Climent <jesus dot climent at hispalinux dot es>
Subject: A patch for generating dynamic rc files


--- a/src/console_fe.c
+++ b/src/console_fe.c
@@ -152,7 +152,8 @@ static int allsites, /* Do they want all
     show_progress, /* Do they want the %-complete messages */
     prompting, /* Did they say --prompting? */
     keepgoing, /* Did they say --keep-going? */
-    dry_run;   /* Did they say --dry-run? */
+    dry_run,   /* Did they say --dry-run? */
+    createremoteroot=false; /* Did they say --create-remote? */	
 
 /* Functions prototypes */
 static void init(int, char **);
@@ -219,9 +220,9 @@ int main(int argc, char *argv[])
 	exit(-1);
     }
 
-    for (current=all_sites; current!=NULL; current=current->next) {
+     for (current=all_sites; current!=NULL; current=current->next) {
 	
-	if (current->use_this || allsites) {
+	 if (current->use_this || allsites) {
 	    if (!listflat && quiet == 0) {
 		/* Display the banner line */
 		const char *str_action = _(actions[action].doing);
@@ -504,6 +505,9 @@ static void parse_cmdline(int argc, char
 	    }
 	} break;
 #endif
+	case 'x':
+	    createremoteroot = true;
+	    break;
 	case 'y':
 	    prompting = true;
 	    break;
@@ -1213,7 +1217,8 @@ static int act_on_site(struct site *site
     int ret = 0, verify_removed;
 
     /* Set the options */
-    site->keep_going = keepgoing;
+     site->keep_going = keepgoing;
+     site->create_remote_root = createremoteroot;	
 
     switch (act) {
     case action_update:
@@ -1357,6 +1362,7 @@ static void usage(void)
 "  -p, --storepath=PATH  Use alternate site storage directory\n"
 "  -y, --prompting       Request confirmation before making each update\n"
 "  -a, --allsites        Perform the operation on ALL defined sites\n"
+"  -x, --create-remote   Create root for remote site\n"
 "  -k, --keep-going      Carry on an update regardless of errors\n"
 "  -o, --show-progress   Display total percentage file transfer complete\n"
 "  -q, --quiet           Be quiet while performing the operation\n"
--- a/src/sites.c
+++ b/src/sites.c
@@ -94,7 +94,6 @@ static int synch_create_directories(stru
     struct site_file *current;
     char *full_local;
     int ret;
-    
     ret = 0;
     
     for_each_file(current, site) {
@@ -312,11 +311,52 @@ file_retrieve_server(struct site_file *f
     free(full_remote);
 }
 
+static int create_remote_root_dirs(struct site *site, void *session)
+{
+    char *buffer;
+    int i,j=0,ret=1,flag=1;
+
+    buffer = (char *) calloc(strlen(site->remote_root)+1,sizeof(char));
+
+    buffer[j++] = '/';
+
+    for( i=1 ; site->remote_root[i] != '\0' ; i++ )
+    {
+      if (site->remote_root[i] == '/')
+        flag = 0;
+
+      if (flag)
+        buffer[j++] = site->remote_root[i];
+      else
+       if (j > 0)
+        {
+         buffer[j] = '\0';
+         ret = CALL(dir_create)(session, buffer);
+
+         if (ret != SITE_OK)
+           ret = 0;
+
+         buffer[j++] = '/';
+         flag=1;
+       }
+    }
+
+    return ret;
+}
+
 /* Create new directories and change permissions on existing directories. */
 static int update_create_directories(struct site *site, void *session)
 {
     struct site_file *current;
-    int ret = 0;
+    int ret = 0, ret_root_dir;
+
+    if (site->create_remote_root) /* We create remote init struct before updating the whole stuff */
+    {
+      ret_root_dir = create_remote_root_dirs(site,session);
+
+      if (!ret_root_dir)
+        fe_warning (_("I couldn't create some dir. already exists?"),NULL,NULL);
+    }
 
     for_each_file(current, site) {
 	if ((current->type == file_dir) 
--- a/src/sites.h
+++ b/src/sites.h
@@ -384,6 +384,8 @@ struct site {
     char *rsh_cmd;
     char *rcp_cmd;
 
+    unsigned int create_remote_root:1; /* to create remote root in case it doesn't exist */	
+
     unsigned int nodelete; /* whether to delete any files remotely */
     unsigned int checkmoved; /* whether to check for moved files */
     unsigned int checkrenames; /* whether to check for renamed files */
